OS模块
	Node.js模块是一些基本的系统操作函数
		os.tmpdir()   返回操作系统的默认临时文件夹
		os.endianness()		返回CPU的字节序
		os.hostname()	返回操作系统的主机名
		os.type()	返回操作系统名
		os.platform()	返回操作系统名
		os.arch()	返回操作系统的CPU架构
		。。。
		os.uptime()	返回操作系统运行的时间,以秒为单位
		os.totalmem()	返回系统内存总量,单位为字节
		os.freemem()	返回操作系统空闲内存量,单位为字节
		os.networekInterfaces()	获得网络接口列表
		
Path模块
	提供了处理和转换文件路的工具
	Node.js  path模块提供了一些用于处理文件路径的小工具,我们可以通过以下方式引入该模块
		var path=require("path");
		path.mormalize(p)
			规范化路径
		path.join(path1,path2,....)
			用于连接路径,该方法的主要路途在于,会正确使用当前系统的路径分隔符,Unix系统是"/",Window
			系统是"\"
		path.resolve([from],to)
			将to参数解析为绝对路径
		path.isAbsolute(path)
			判断参数path是否是绝对路径
		path.relative(from,to)
			用于将相对路径转换为绝对路径
		path.dirname(p)
			返回路径中代表文件夹的部分,同Unix的dirname命令类似
		path.parse(pathString)
			返回路径字符串的对象
		path.format(pathObject)
			从对象中返回路径字符串,和path.parse相反
		详情查看API
		
		
		
Net模块
	用于底层的网络通信,提供了服务器和客户端的操作
	net.createServer([options],connectionListener)
		创建一个TCP服务器,参数connectionListener自动给'connection'事件创建监听器
	
	net.connect(options,connectionListener)
		创建一个新的'net Socket'，并连接到指定的地址和端口,当socket建立的时候,
		将会触发'connect'事件
		
	net.createConnection(options,connectionListener)
		创建一个端口port和主机host的TCP连接
	
	。。。。
	详见・api
	
	
DNS模块
	用于解析域名
	dns.reverse(ip, callback)
	反向解析 IP 地址，指向该 IP 地址的域名数组。
	
	dns.getServers()
	返回一个用于当前解析的 IP 地址数组的字符串。
	
	dns.setServers(servers)
	指定一组 IP 地址作为解析服务器。
	

Domain模块
	简化异步代码的异常处理,可以捕捉处理try catch无法捕捉的
	domain模块
		把处理多个不同的IO操作作为一个组，注册事件和回调到domain,当发生一个错误事件或抛出一个
		错误时,domain对象会被通知,不会丢失上下文环境,也不导致程序错误立即退出
	Domain模块可分为隐式绑定和显示绑定
		隐式绑定:把domain上下文中定义的变量,自动绑定到domain对象中
		显实绑定:把不是domain上下文中定义的变量,以代码的方式绑定到domain对象
	domain.run(function)
		在域的上下文运行提供的函数，隐式的绑定所有的事件分发器,计时器和底层请求
		
	domain.add(emitter)
		显式的添加事件
		
	domain.remove(emitter)
		删除事件
	domain.bind(callback)
		返回的函数是一个对于所提供的回调函数的包装函数,当调用这个返回的函数时，所有的被抛出的
		异常都会导向这个域的error事件
	domain.intercept(callback)
		和domain.bind(callback)类似,除了捕捉被抛出的异常，它还会拦截error对象作为参数传递到
		这个函数
	domain.enter()
		进入一个异步调用的上下文,绑定到domain
	domain.exit()
		退出当前的domain,切换到不同的链的异步调用的上下文中,对应domain.enter()
	domain.dispose()
		释放一个domain对象,让node进程回收这部分资源
	domain.create()
		返回一个domain对象
		
	属性
		domain.members
			已加入domain对象的域定时器和事件发射器的数组
	
	eg:  var EventEmitter=require('events').EventEmitter;
		 var domain=require("domain");
		 var emitter1=new EventEmitter();
		 //创建域
		 var domain1=domain.create();
		 domain1.on('error',function(err){
			console.log("通过domain1 处理这个函数"+err.message);
		 })
		 //显示绑定
		 domain1.add(emitter1);
		 
		 emitter1.on("error",function(err){
			console.log("通过监听器来处理"+err.message);
		 })
		 emitter1.emit('error');
		 
		 //隐式绑定
		 domain1.run(function(){
			var emitter2=new  EventEmitter();
			emitter2.emit("error",new Error("通过domain2处理"));
		 })
		 
		 由上面的代码可以看出显示绑定和隐式绑定其实就是一个调用add方法一个调用run方法
		 而错误转交给domain处理,其实就是把事件监听器添加到domain中