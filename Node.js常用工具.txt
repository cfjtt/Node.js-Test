util是一个Node.js的核心模块,提供常用函数的集合
	util.inherits
		util.inherits是一个实现对象间原型继承的函数,javascript的面向对象特性是基于原型
		的，与常见的基于类的不同,javascript没有提供对象继承的语言级别的特性,而是通过
		原型复制来实现的
		var util = require('util'); 
		function Base() { 
			this.name = 'base'; 
			this.base = 1991; 
			this.sayHello = function() { 
			console.log('Hello ' + this.name); 
			}; 
		} 
		Base.prototype.showName = function() { 
			console.log(this.name);
		}; 
		util.inherits(Sub, Base);
		这样写就表示sub是继承自base的
	  注意:Sub仅仅继承了Base在原型中定义的函数,即showName函数，而构造方法内部创造的base
	  属性和sayHello函数都没有被Sub继承，比如现在sub调用sayHello方法就会报错
	  
	util.inspect
		util.inspect(object,showHidden,depth,colors)是一个将任何对象转换成字符串的方法，通常用于调试和错误输出
		参数:object  要转换的对象
			showHidden 是一个可选的参数，为true将会输出更多隐藏信息
			depth  表示最大递归的层数，如果对象很复杂，你可以控制层数以控制输出信息的多少
					默认为2层，如果为null表示将不限递归层数
			color  输出的格式将带有颜色
		需要注意的是util.inspect并不会简单的直接把对象转换成字符串，即使对象提供了toString方法
	
	util.isArray(object)
		判断是否是数组
	util.isRegExp(object)
		判断是否是一个正则表达式
		util.isRegExp(new RegExp(..))
		
	util.isDate(object)
		判断是否是日期
	util.isError(object)
		判断给定的对象是否是一个错误对象