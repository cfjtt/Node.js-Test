Node.js是单进程单线程应用程序,但是通过事件和回调支持并发
Node.js基本上所有的事件机制都是用设计模式中观察者模式实现的
Node.js单线程类似于一个while(true)的事件循环,直到没有事件观察者退出,每个异步事件都生成一个事件
观察者・,如果有事件发生就调用该回调函数

事件驱动程序
	Node.js使用事件驱动模型,当web server接收到请求,就把它关闭然后进行处理，然后去服务下一个web请求
	当这个请求完成时,它被放回处理队列,当到达队列开头,这个结果被返回给用户
	这种模式非常高效可扩展性非常强,因为webserver一直接受请求而不等待任何读写操作
	在事件驱动模型中,会生成一个主循环来监听事件,当检测到事件时触发回调函数
	
	Node.js有多个内置的事件,我们可以通过引入events模块,并通过实例化EventEmitter类来绑定和监听事件
		//引入events模块
		var events=require('events');
		//创建eventEmitter对象
		var eventEmitter=new events.EventEmitter();
		//绑定事件处理函数
		eventEmitter.on('eventName',eventHandler);
		//触发事件
		eventEmitter.emit('eventName');
		
		eg://引入events模块
			var events=require('events');
			//创建eventEmitter对象
			var eventEmitter=new events.EventEmitter();
			//创建事件处理函数
			var connectHandler=function connected(){
				//触发data_received事件
				eventEmitter.emit('data_received');
			}
			//绑定connection事件处理
			eventEmitter.on('connection',connectHandler);
			//使用匿名函数绑定data_received事件
			eventEmitter.on('data_received',function(){
				console.log('数据接收成功');
			});
			//触发connection事件
			eventEmitter.emit('connection');
			console.log('程序执行完毕');
			
	
	Node应用程序是如何工作的?
		在Node应用程序中，执行异步操作的函数将回调函数作为最后一个参数,回调函数接收错误对象作为第一个参数
		var fs=require('fs');
		fs.readFile('input.txt',function(err,data){
			if(err){
				console.log(err.stack);
				return;
			}
			console.log(data.toString());
		})
			console.log("程序执行完毕");
			