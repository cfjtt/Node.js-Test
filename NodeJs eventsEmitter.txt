Node.js所有的异步I/O操作在完成时都会发送一个事件到事件队列
Node.js里面的许多对象都会分发事件,一个net.Server对象会在每次有新连接时分发一个事件,一个fs.readStream对象会在文件被打开的时候发出一个事件,所有这些产生事件的对象都是events.EventEmitter的实例

EventEmitter
	events模块只提供了一个对象:events.EventEmitter。EventEmitter的核心就是事件触发与事件监听器
		   功能的封装
	
	//引入events模块
	var events=require("events");
	//创建eventEmitter对象
	var eventEmitter=new  events.EventEmitter();
	EventEmitter对象如果在实例化时发生错误,会触发'error'事件,当添加新的监听器时,'newListener'事件会触发，当监听器被移除时,'removeListener'事件被触发
	eg:var EventEmitter=require('events');
	var event=new events.EventEmitter();
	//绑定事件处理函数
	event.on('some_event',function(){
		console.log('some_out 事件触发');
	});
	setTimeout(function(){
		event.emit('some_out');
	},1000)
	执行结果是some――out事件触发了
	执行原理:event对象注册了事件some_out的一个监听器,然后setTimeout在1000毫秒以后向event对象发送事件some_out,此时会调用some_out的监听器
	
	EventEmitter的每个事件是由一个事件名和若干个参数组成,事件名是一个字符串,通常表达一定的语义,对于每个事件，event支持若干个事件监听器
	当事件触发时,注册到这个事件的事件监听器被依次调用,事件参数作为回调函数参数传递
	
	EventEmitter方法
		1.addListener(event,listener)/on也可以绑定事件监听
			为指定事件添加一个监听器到监听器数组的尾部
		2.on(event,listener)
			为指定事件注册一个监听器,接受一个字符串event和一个回调函数
			server.on('connection',function(stream){
				console.log('someone connected!')
			})
		3.once(event,listener)
			为指定事件注册一个单次监听器,即监听器最多只会触发一次,触发后立刻解除该监听器
			server.once('connection',function(stream){
				console.log('Ah,we have our first user!');
			})
		4.removeListener(event,listener)
			移除指定事件的某个监听器,监听器必须是该事件已经注册过的监听器
			var callback=function(stream){
				console.log('someone connected!');
			}
			server.on('connection',callback);
			....
			server.removeListener('connection',callback);
		5.removeAllListeners([event])
			移除所有事件的所有监听器,如果指定事件,则移除指定事件的所有监听器
		6.setMaxListeners(n)
			默认情况下,EventEmitters如果添加的监听器超过10个就会输出警告信息,setMaxListeners函数用于提高监听器的默认限制的数量
		7.listeners(event)
			返回指定事件的监听器数组
		8.emit(event,arg1,arg2..)
			按参数的顺序执行每个监听器,如果事件有注册监听返回true,否则返回false
			
		类方法
			listenerCount(emitter,event);
			返回指定事件的监听器数量
		事件
			newListener
				event  字符串,事件名称
				listener 处理事件的函数
			  该事件在添加新的监听器时被触发
			 
			removeListener
				event 字符串,事件名称
				listener  处理事件函数
			  从指定监听器数组中删除一个监听器,需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引
			  
	    error事件
			EventEmitter定义了一个特殊的事件error,它包含错误的语义
			当error被触发时,EventEmitter规定如果没有响应的监听器,NodeJS会把它当做异常，退出程序并输出错误信息，所以我们一般都会为触发error事件的对象，设置监听器,避免遇到错误后整个程序崩溃
			var events=require('events');
			var emitter=new  events.EventEmitter();
			emitter.emit('error');
		
		继承EventEmitter
			大多数时候我们不会直接使用EventEmitter，而是在对象中继承它,包括fs,net,http在内的，只要是支持事件响应的核心模块都是EventEmitter子类
			为什么这样做呢?
				首先具有某个实体功能的对象实现事件符合语义,事件的监听和发射应该是一个
			对象的方法
				其实Javascript的对象机制是基于原型的，支持部分多重继承,继承EventEmitter不会打破原来的规则
			