Express框架核心特性
	可以设置中间件来响应HTTP请求
	定义了路由表来执行不同的HTTP请求
	可以通过向模版传递参数来动态渲染HTML页面

安装Express
	npm install express,以下几个重要的模块是需要与express框架一起安装的
	body-parser  -node.js中间件,用于处理JSON，Raw,Text和URL编码的数据
	cookie-parser  这是一个解析Cookie的工具,通过req.cookies可以取到传过来的Cookie,并把他们转换
					成对象
	multer   node.js中间件,用于处理enctype='multipart/form-data'的表单数据

	npm install body-parser --save
	npm install cookie-parser --save
	npm install multer --save
	第一个Express框架实例
		var express=require("express");
		var app=express();
		app.get('/',function(req,res){
			res.send('Hello Wolrd');
		})
		
		var server=app.listen(8081,function(){
			var host=server.address().address;
			var port=server.address().port;
			console.log("应用实例,访问地址为http://",host,port);
		})
		
		
	请求和响应
		Express应用使用回调函数,request和response对象来处理请求和响应的数据
		app.get('/',function(req,res){
		})
		Request对象  request对象表示HTTP请求,包含了请求查询字符串,参数,内容,HTTP头部等
		属性，常见属性有:
		1.req.app	当callback为外部文件时,用req.app访问express的实例
		2.req.baseUrl   获取路由当前安装的URL路径
		3.req.body/req.cookies   获取[请求主体]/Cookies
		4.req.fresh/req.state	判断请求是否还[新鲜]
		5.req.hostname/req.ip		获取主机名和IP地址
		6.req.originalUrl:	获取原始请求URL
		7.req.params:	获取路由的parameters
		8.req.path	获取请求路径
		9.req.prorocol	获取协议类型
		10.req.query   获取URL的查询参数串
		11.req.route	获取当前匹配的路由
		12 req.subdomains	获取子域名
		13	req.accpets()	检查请求的Accept头的请求类型
		14	req.get()	获取指定的HTTP请求头
		15	req.is()	判断当前请求头的Content-Type的mime类型
		
		Response对象  response对象表示HTTP响应,即在接收到请求时向客户端发送HTTP响应数据
						常见属性有：
			1.res.app	同req.app一样
			2.res.append() 追加指定http头
			3.res.set()	在res.append()后将重置之前设置的头
			4.res.cookie(name,value,[option])  设置Cookie
			5.option:domain/expires/httpOnly/maxAge/path/secure/signed
			6.res.clearCookie()	清除Cookie
			7.res.download()	传送指定路径的文件
			8.res.get()	返回指定的HTTP
			9.res.json()	传送JSON响应
			10  res.jsonp()	传送jsonp响应
			11 res.location()	只设置响应的Location  HTTP头,不设置状态码或者
								close response
			12	res.redirect()	设置响应的Location	HTTP头,并且设置状态码302
			13	res.send()	传送http响应
			14	res.sendFile(path,[option],[fn])	传送指定路径的文件,会自动根据文件
							extension设定Content-Type
			15	res.set()	设置HTTP头,传入object可以一次设置多个头
			16 res.status()	设置HTTP状态码
			17	res.type()	设置Content-Type的MIME类型
		
		
	路由
		我们已经了解了HTTP请求的基本应用,而路由决定了有谁去响应客户端请求
		在HTTP请求中，我们可以通过路由提取请求的URL以及GET/POST参数
		var express=require('express');
		var app=express();
		//主页输出'Hello Wolrd'
		app.get('/',function(req,res){
			console.log("主页GET请求");
			res.send('Hello GET');
		})
		
		//post请求
		app.post('/',function(req,res){
			console.log("主页POST请求");
			res.send("Hello POST");
		})
		
		//del_user页面响应
		app.delete('/del_user',function(req,res){
			console.log('/del_user响应DELETE请求');
			res.send("删除页面");
		})
		
		//list_user页面GET请求
		app.get('/list_user',function(req,res){
			console.log('/list_user GET请求');
			res.send("用户列表页面");
		})
		
		//对页面abxd,ab123cd等响应GET请求
		app.get('/ab*cd',function(req,res){
			console.log("/ab*cd	GET请求");
			res.send("正则匹配");
		})
		
		var server=app.listen(8081,funtion(){
			var host=server.address().address;
			var port=server.address().port;
			console.log("应用实例,访问地址为",host,port);
			
			
			
			
	静态文件
		Express提供了内置的中间件express.static来设置静态文件如:图片，CSS，Javascript等
		可以使用express.static中间件来设置静态文件路径,如果需要将图片，CSS，Javascript
		文件放在public目录下
			app.use(express.static('public'))
		我们可以到public/images目录下放些图片,如下所示
		var express=require('express');
		var app=express();
		app.use(express.static('school'));
		app.get('/',function(req,res){
			res.send('Hello World');
		})
		var server=app.listen(8081,function(){
			var host=server.address().address;
			var post=server.address().port;
			console.log("应用实例,访问地址为");
		})
		
		运行程序，此时如果我们不添加上面的app.use(express.static('school'))
		而访问school下面的文件是会访问不到,只有当我们添加了app.use(express.static('school'))才能访问
		
		
	GET方法
		以下实例演示了表单通过GET方法提交两个参数,我们可以使用server.js文件内的process.get路由器来处理输入
		<html>
			<body>
				<form action='http://127.0.0.1:8081/process_get' method='GET'>
					First Name:<input type='text' name='first_name'>
					Last Name:<input type='text' name='last_name'>
					<input type='submit' value='submit'>
				</form>
			</body>
		</html>
		
		server.js文件代码如下
		var express=require('express');
		var path=require('path');
		var app=express();
		app.use(express.static('public'));
		app.get('/index.html',function(req,res){
			res.sendFile(path.join(_dirname,"index.html"));
		})
		
		app.get('/process_get',function(req,res){
			//输出JSON格式
			response={
				first_name:req.query.first_name,
				last_name:req.query.last_name
			};
			console.log(response);
			res.end(JSON.stringify(response));
			注意上面的JSON.stringify(response)是将json转换成字符串
			而前面我们所将会util.inspect也是可以将任何对象转换成字符串
			两者有什么区别呢
			util.inspect比较强大，即使是不可序列化的东西也可以被转换成字符串
			而JSON.stringify()就不可以
		})
		
		var server=app.listen(8081,function(){
			var host=server.address().address;
			var port=server.address().port;
		})
		
		
		
	POST方法
	<html>
		<body>
			<form action='http://127.0.0.1:8081/process_post' method='post'>
				First Name:<input type='text' name='first_name'>
					Last Name:<input type='text' name='last_name'>
					<input type='submit' value='submit'>
			</form>
		</body>
	</html>
	
	var express=require('express');
	var app=express();
	var bodyParser=require('body-parser');
	//创建application/x-www-form-urlencoded编码解析
	var urlencodeParser=bodyParser.urlencoded({extended:false});
	app.use(express.static('public'));
	app.get('/index.html',function(req,res){
		res.sendFile(_dirname+'/'+'index.html');
	})
	app.post('/process_get',urlencodedParser,function(req,res){
		//输出JSON格式
		response={
			first_name:req.body  //上面所写的req的一些方法
			last_name:req.body.last_name
		};
		console.log(response);
		res.end(JSON.stringify(response));
	})
	
	var server=app.listen(8081,function(){
		var host=server.address().address;
		var port=server.address().port;
		console.log("应用实例,访问地址为")
	})
	
	
	
	文件上传(很重要)
		以下我们创建一个用于上传文件的表单,使用post方法,表单enctype属性设置为
		multipart/form-data
		<html>
			<head>
				<title>文件上传表单</title>
			</head>
			<body>
				<h3>文件上传:</h3>
				选择一个文件上传:<br/>
			<form action='/file_upload' method='post' enctype='multipart/form-data'>
				<input type='file' name='image' size='50' />
				<input type='submit' value='上传文件' />
			</form>
			</body>
		</html>
		
		var express=require('express');
		var app=express();
		var fs=require('fs');
		
		//bodyParser是node.js的中间件,用于处理 JSON, Raw, Text 和 URL 编码的数据
		var bodyParser=require('body-parser');
		var multer=require('multer');
		
		
		app.use(express.static('public'));
		app.use(bodyParser.urlencoded({extended:false}));
		app.use(multer({dest:'/tmp'})).array('image');
		
		app.get('/index.html',function(req,res){
			res.sendFile(_dirname+"/"+"index.html");
		})
		
		app.post('/file_upload',function(req,res){
			console.log(req.files[0]);   //上传的文件信息
			var del_file=_dirname+"/"+req.files[0].originalname;
			fs.readFile(req.file[0].path,function(err,data){
				fs.writeFile(des_file,data,function(err){
					if(err){
						console.log(err);
					} else {
						response={
							message:'File uploaded sucessfully',
							filename:req.files[0].originalname;
						};
					}
					console.log(response);
					res.end(JSON.stringify(response));
				})
			})
		})
		
		var server=app.listen(8081,function(){
			var host=server.address().address;
			var port=server.address().port;
			console.log("...");
		})
		
		
	Cookie管理
		我们可以使用中间件向Node.js服务器cookie信息,以下代码输出客户端发送cookie信息
		//express_cookie.js文件
		var express=require('express');
		var cookieParser=require('cookie-parser');
		var app=express();
		app.use(cookieParser());
		app.get('/',function(req,res){
			console.log('Cookie',req.cookies);
		});
		app.listen(8081);
		
		
	
	
	