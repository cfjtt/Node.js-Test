Node.js多进程
	我们都知道Node.js是以单线程的模式运行的,但它使用的是事件驱动来处理程序,这样有助于
	我们在多核CPU的系统中创建多个子进程,从而提高性能
	
	每个子进程总是带有三个流对象:child.stdin,child.stdout,child.stderr.他们可能会共享
	父进程的stdio流,或者也可以是独立的被导流的流对象
	Node提供了child_process模块来创建子进程,方法有:
		exec	-child_process.exec  使用子进程执行命令,缓存子进程的输出,并将子进程的输出
				以回调函数参数的形式返回
		
		spawn	child_process.spawn 使用指定的命令行参数创建新进程
		
		fork	child_process.fork是spawn()的特殊形式,用于在子进程中运行的模块
				如fork('./son.js')相当于spawn('node',['./son.js'])与spawn方法不同的是
				fork会在父进程与子进程之间,建立一个通信管道,用于进程之间的通信
				
exec()方法
	child_process.exec使用子进程执行命令,缓存子进程输出,并将子进程的输出以回调函数参数的
	形式返回
		child_process.exec(command,[options],callback)
		参数说明如下:
			command:字符串，将要运行的命令,参数使用空格隔开
			options:
				cwd:字符串,子进程的当前工作目录
				env:环境变量键值对
				encoding:字符串,字符编码(默认是‘utf-8’)
				shell  字符串,将要执行命令的Shell
				timeout:数字,超时时间
				maxBuffer:数字,在stdout或stdeer中允许存在的最大缓冲(二进制),如果超出
				那么子进程将会被杀死
				killSignal:字符串,结束信号
				uid:数字，设置用户进程的ID
				gid:数字，设置进程组的ID
		callback:回调函数,包含三个参数error,stdout和stderr
			exec()方法返回最大的缓冲区,并等待进程结束,一次性返回缓冲区的内容
		
		eg:const fs=require("fs");
			const child_process=require("child_process");
			for(var i=0;i<3;i++){
				var workerProcess=child_process.exec('node support.js',function(error,stdout,stderr){
					if(error){
						console.log(error.stack);
						console.log('Error code'+error.code);
						console.log('Signal received:'+error.signal);
					}
					console.log('stdout'+stdout);
					console.log('stderr'+stderr);
				});
				workerProcess.on('exit',function(code){
					console.log('子进程已退出,退出码'+code)；
				});
			}
			
			
	spawn()方法
		child_process.spawn使用指定的命令行参数创建新进程,语法格式如下
		child_process.spawn(command,[args],[options])
		参数：
			command:将要允许的命令
			args:Array字符串参数数组
			options  Object
				cwd String 子进程的当前工作目录
				env Object	环境变量键值对
				stdio	Array|String 子进程的stdio配置
				detached Boolean  这个子进程将会变成进程组的领导
				uid Number 设置用于进程的ID
				gid Number 设置进程组的ID
		spawn()方法返回流(stdout&stderr),在进程返回大量数据时使用。进程一旦开始执行
				spawn()就开始接收响应
			让我们创建两个js文件support.js和master.js
			const fs = require('fs');
			const child_process = require('child_process');
			for(var i=0; i<3; i++) {
				var workerProcess = child_process.spawn('node', ['support.js', i]);

				workerProcess.stdout.on('data', function (data) {
					console.log('stdout: ' + data);
				});

				workerProcess.stderr.on('data', function (data) {
					console.log('stderr: ' + data);
				});

				workerProcess.on('close', function (code) {
					console.log('子进程已退出，退出码 '+code);
				});
			}
			
fork方法
	child_process.fork是spawn()方法特殊的形式,用于创建进程
		child_process.fork(modulePath,[args],[options])
	参数
		modulePath:String 将要在子进程中运行的模块
		args:Array字符串数数组
		options:
			cwd  String 子进程的当前工作目录
			env  Object  环境变量键值对
			execPath  String 创建子进程的可执行文件
			execArgv Array  子进程的可执行文件的字符串参数数组
			silent  Boolean  如果为true,子进程的stdin,stdout和stderr将会被关联至父进程
							否则,它们将会从父进程中继承
			uid Number 设置用户进程的ID
			gid Number设置进程组的ID
			
			返回的对象除了ChildProcess实例的所有方法,还有一个内建的通信通道
			const fs = require('fs');
			const child_process = require('child_process');
 
			for(var i=0; i<3; i++) {
				var worker_process = child_process.fork("support.js", [i]);	

				worker_process.on('close', function (code) {
					console.log('子进程已退出，退出码 ' + code);
				});
			}
		