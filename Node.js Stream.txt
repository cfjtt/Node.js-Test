Stream是一个抽象接口,Node中有很多对象实现了这个接口,例如:对http服务器发起请求的request
	对象实际上就是一个stream,还有stdout(标准输出)
	Node.js,Stream有四种类型
		Readable	--可读操作
		Writable	--可写操作
		Duplex		--可读可写操作
		Transform	--操作被写入数据,然后读出结果
	
	所有的Stream对象都是EventEmitter的实例,常用的事件有
		data	-当有数据可读时触发
		end		-没有更多数据可读时触发
		error	-在接受和写入过程中发生错误时触发
			error事件比较特殊，如果我们不给error添加监听器，Node.js或抛出异常
			下面的代码不在执行，所以我们一般在使用error时，都会添加监听器
		finish	-所有数据已被写入到底层系统时触发
		
	从流中读取数据步骤
		1.引入模块
			var fs=require("fs");
		2.创建可读流
			var readerStream=fs.createReadStream("input.txt");
		3.绑定处理流事件->data,end,error
			//data当有数据可读时，触发
			readerStream.on("data",function(chunk){
			
			});
		    //end事件，当没有数据可读时触发
			readerStream.on("end",function(){
				
			})
			//error,当在接受和写入过程中发生错误时触发
			readerStream.on("error",function(err){
				console.log(err.stack);
			});
			
		
	写入流
		1.引入模块
			var fs=require("fs");
		2.创建可写流
			//准备数据
			var data=".....";
			var writerStream=fs.createWriteStream("output.txt");
		3.写入数据
			writeStream.write(data,"utf-8");
			
		4.标记文件末尾
			writeStream.end();
		
		5.处理流事件-->data,end,error
			writeStream.on("finish",function(){
				console.log("写入完成");
			})
			writeStream.on("error",function(err){
				console.log(err.stack);
			})
		
	
	管道流
		管道提供了一个输出流到输入流的机制,通常我们用于从一个流中获取数据,并将数据
		传递到另一个流中
		步骤:
			1.引入模块
				var fs=require("fs");
			2.创建一个可读流
				var readerStream=fs.createReadStream('input.txt');
			3.创建一个可写流
				var writeStream=fs.createWriteStream('output.txt');
			4.管道流读写操作
				读取input.txt文件内容,并将内容写入到output.txt文件中
				readerStream.pipe(writeStream);
			查看文件的内容
				cat output.txt
	

	链式流
		其实就是链式操作,链式流一般用于管道操作
		下面我们用管道和链式来压缩和解压文件
		压缩文件:
			var fs=require("fs");
			var zlib=require("zlib");
			//压缩input.txt文件为input.txt.gz
			fs.createReadStream("input.txt").pipe(zlib.createGzip()).pipe(fs.createWriteStream("input.txt.gz"));
			console.log("文件压缩完成");
			
		解压文件
			var fs=require("fs");
			var zlib=require("zlib");
			//解压
			fs.createReaderStream('input.txt.gz').pipe(zlib.createGunzip()).pipe(fs.createWriteStream("input.txt"));
		
	
			