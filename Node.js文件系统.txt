Node.js提供了一组类似UNIX标准的文件操作API
	var fs=require('fs');
	
	异步和同步
		Node.js文件系统(fs模块)模块中的方法均有异步和同步两个方法，比如读取文件内容的
		函数有异步的fs.readFile()和同步的fs.readFileSync()
		异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)
		
	eg: var fs=require("fs");
		//异步读取
		fs.readFile("input.txt",function(err,data){
			if(err){
				return console.error(err);
			}
			console.log("异步读取:"+data.toString());
		})
		
		//同步读取
		var data=fs.readFileSync("input.txt");
		console.log("同步读取:"+data.toString());
		console.log("程序执行完毕");
		
	打开文件
		以下是在异步模式下打开文件
		fs.open(path,flags,mode,callback)
		参数
			path	-文件的路径
			flags	-文件打开的行为
			mode	设置文件的权限
			callback	回调函数，带有两个参数(err,function)
		flags参数可以是以下值
			r 以读取模式打开文件,如果文件不存在抛出异常
			等等
			
		eg:  var fs=require("fs");
			 fs.open("input.txt","r+",function(err,fd){
				if(err){
					return console.error(err);
				}
				console.log("文件打开成功");
			 })
		
	获取文件信息
		fs.stat(path,callback)
		参数
			path	-文件路径
			callback -回调函数,带有两个参数如:(err,stats)
			fs.stat(path)执行后,会将stats类的实例返回给回调函数,可以通过stats类
			中提供方法判断文件的相关属性
				var fs=require("fs");
				fs.stat("..",function(err,stats){
					console.log(stats.isFile());
				})
		stats类中的常用的方法
			stats.isFile()   如果是文件返回true,否则・返回false
			stats.isDirectory()		如果是目录返回true,否则返回false
			stats.isBlockDevice()	如果是块设备返回true,否则返回false
			stats.isCharacterDevice()	如果是字符设备返回true,否则返回false
			stats.isSymbolicLink()	如果是软链接返回true，否则返回false
			stats.isFIFO()	如果是队列FIFO，返回true，否则返回false，FIFO是UNIX中
							一种特殊类型的先进先出的存储器
			stats.isSocket()	如果是Socket返回true，否则返回false
			
	写入文件
		fs.writeFile(filename,data,options,callback)
		如果文件存在,该方法写入的内容会覆盖旧的文件内容
		参数
			path:文件路径
			data:要写入文件的数据,可以是String(字符串)或Buffer(流)对象
			options:该参数是一个对象,包含{encoding,mode,flag}
			callback:回调函数，回调函数只包含错误信息(err),在写入失败时返回
		eg: var fs=require("fs");
			console.log("准备写入文件");
			fs.writeFile("input.txt","我是要写入的内容",function(err){
				if(err){
					return console.error(err);
				}
			})
			fs.readFile('input.txt',function(err,data){
				if(err){
					return console.error(err);
				}
				console.log("读取数据成功"+data.toString());
			});
			//压缩文件
			fs.createReadStream('input.txt').pipe(zlib.createGzip()).pipe(fs.createWriteStream('input.txt.gz'));
			console.log("文件压缩成功");
			//解压文件
			fs.createReadStream('input.txt.gz').pipe(zlib.createGunzip()).pipe(fs.createWriteStream('input.txt'));
			
	读取文件
		fs.read(fd,buffer,offset,length,position,callback)
		该方法使用了文件描述符来读取文件
		参数: fd	-通过fs.open()方法返回的文件描述符
			  buffer	-数据写入的缓冲区
			  offset	-缓冲区写入的写入偏移量
			  length	-要从文件中读取的字节数
			  position	-文件读取的起始位置,如果position的值为null,则会从当前文件指针
						的位置读取
			  callbacl	-回调函数，有三个参数err,bytesRead,buffer,err为错误信息,bytesRead表示
						读取的字节数,buffer为缓冲区对象
			var fs=require("fs");
			var buf=new Buffer(1024);
			console.log("准备打开已存在的文件");
			fs.open("inpur.txt",'r+',function(err,fd){
				if(err){
					return console.error(err);
				}
				console.log("准备打开文件");
				fs.read(fs,buf,0,buf.length,0,function(err,bytes){
					if(err){
						console.log(err);
					}
					console.log(bytes+"字节被读取");
					console.log(buf.slice(0,bytes));
				});
			})
			
	关闭文件
		fs.close(fd,callback);
		参数
			fd	-通过fs.open()方法返回的文件描述符
			callback	回调函数，没有参数
			
		eg: var fs=require("fs");
			var buf=new Buffer(1024);
			console.log("准备打开文件!");
			fs.open("input.txt",'r+',function(err,fd){
				if(err){
					return console.error(err);
				}
				console.log("文件打开成功");
				console.log)("准备读取文件");
				fs.read(fd,buf,0,buf.length,0,functon(err,bytes){
					if(err){
						console.log(err);
					}
					
				})
				//关闭文件
				fs.close(fd,function(err){
					if(err){
						console.log(err);
					}
				})
			})
			
	截取文件
		fs.ftruncate(fs,len,callback);
		callback:回调函数,没有参数
	
	删除文件
		fs.unlink(path,callback)
	
	创建目录
		fs.mkdir(path,model,callback)
		参数:path	-文件路径
			 model	-设置目录权限
			 callback	-回调函数,没有参数
			 
	读取目录
		fs.readdir(path,callback)
		参数
			path	-文件路径
			callback	-回调函数，回调函数带有两个参数err,files
						err为错误信息，files为目录下的文件数组列表
		
		var fs=require("fs");
		fs.readdir("/tmp/",function(err,files){
			if(err){
				return console.error(err);
			}
			files.forEach(function(file){
				console.log(file);
			})
		})
	
	删除目录
		以下为删除目录的语法格式
			fs.rmdir(path,callback)
	
	文件模块方法参考手册
		1.fs.rename(oldPath,newPath,callback)
		2.fs.ftruncate(fd,len,callback)
			截取文件
		3.fs.ftruncate(fs,callback)
			同步的方式截取文件
		4.fs.truncate(path,len,callback)
			截取文件
		5.fs.truncateSync(path,len)
		6.fs.chown(path,uid,gid,callback)
			用来更改文件所有权
			path:目录路径
			uid：用户id
			gid:群体身份(只共享资源系统使用者的身份)
			callback:回调，传递异常参数err
		7.fs.stat(path,callback)
			获取文件信息
		8.fs.link(srcpath,dstpath,callback)
			创建硬链接
			srcpath:为源目录或文件的路径
			dstpath:存放转换后的目录的路径,默认为当前工作目录
			callback:传递一个err异常参数
		9.fs.realpath(path,cache,callback)
			获取真实路径
		详细方法见api